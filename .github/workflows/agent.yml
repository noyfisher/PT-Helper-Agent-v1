name: Agent Runner (PR or Direct)

on:
  push:
    paths:
      - 'agent/tasks/queued/*.json'
  workflow_dispatch: {}

jobs:
  run-agent:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r agent/requirements.txt
          sudo apt-get update
          sudo apt-get install -y jq

      # Detect the first queued task and its mode ("pr" default, or "direct")
      - name: Detect mode and prepare branch or main
        id: prep
        run: |
          TASK_FILE="$(ls agent/tasks/queued/*.json 2>/dev/null | head -n 1 || true)"
          if [ -z "$TASK_FILE" ]; then
            echo "No queued tasks found."
            echo "task=" >> $GITHUB_OUTPUT
            echo "mode=pr" >> $GITHUB_OUTPUT
            echo "branch=" >> $GITHUB_OUTPUT
            exit 0
          fi

          MODE="$(jq -r '.mode // "pr"' "$TASK_FILE")"
          TITLE="$(jq -r '.title // "agent-update"' "$TASK_FILE" | tr '[:space:]' '-' | tr -cd '[:alnum:]-_.')"
          BRANCH="agent-${TITLE}-${GITHUB_RUN_NUMBER}"

          git config user.name "agent-bot"
          git config user.email "bot@example.com"

          git fetch origin --prune
          if [ "$MODE" = "direct" ]; then
            echo "Mode: direct (commit to main)."
            git checkout -B main origin/main
          else
            echo "Mode: pr (commit to branch and open PR)."
            git checkout -B "$BRANCH" origin/main
          fi

          echo "task=$TASK_FILE"   >> $GITHUB_OUTPUT
          echo "mode=$MODE"        >> $GITHUB_OUTPUT
          echo "branch=$BRANCH"    >> $GITHUB_OUTPUT

      - name: Run agent
        if: steps.prep.outputs.task != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python agent/bot.py

      - name: Debug bot output
        if: steps.prep.outputs.task != ''
        run: |
          echo "=== Files created by bot ==="
          find . -name "*.swift" -type f -newer agent/bot.py 2>/dev/null || echo "No new Swift files found"
          echo "=== iOS project structure ==="
          find ios -name "*.swift" -type f 2>/dev/null | head -10 || echo "No iOS files found"
          echo "=== Git status after bot ==="
          git status
          echo "=== Agent outputs ==="
          echo "Branch name: $(cat agent/last_branch_name.txt 2>/dev/null || echo 'none')"
          echo "PR body preview: $(head -3 agent/last_pr_body.txt 2>/dev/null || echo 'none')"

      - name: Commit changes (if any) - Enhanced
        if: steps.prep.outputs.task != ''
        id: commit
        run: |
          # Keep output.json so you can inspect the model response in the PR/commit
          git add agent/output.json || true
          git add -A
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Show what we're about to commit
          echo "=== Changes to commit ==="
          git diff --cached --name-only
          
          COMMIT_MSG="Agent: $(cat agent/last_branch_name.txt 2>/dev/null || echo update)"
          git commit -m "$COMMIT_MSG"
          
          # Enhanced push with retry logic and better error handling
          if [ "${{ steps.prep.outputs.mode }}" = "direct" ]; then
            echo "Pushing directly to main."
            for i in {1..3}; do
              echo "Push attempt $i to main..."
              if git push origin main; then
                echo "Successfully pushed to main"
                break
              else
                echo "Push attempt $i failed, retrying..."
                if [ $i -lt 3 ]; then
                  sleep 2
                  git fetch origin main
                  git rebase origin/main || git reset --hard HEAD~1
                fi
              fi
            done
          else
            echo "Pushing to branch: ${{ steps.prep.outputs.branch }}"
            for i in {1..3}; do
              echo "Push attempt $i to branch..."
              if git push --set-upstream origin "${{ steps.prep.outputs.branch }}"; then
                echo "Successfully pushed to branch ${{ steps.prep.outputs.branch }}"
                break
              else
                echo "Push attempt $i failed, retrying..."
                if [ $i -lt 3 ]; then
                  sleep 2
                  # Fetch latest and try to resolve conflicts
                  git fetch origin
                  if git rebase origin/main 2>/dev/null; then
                    echo "Successfully rebased on main"
                  else
                    echo "Rebase failed, using force push"
                    git rebase --abort 2>/dev/null || true
                    git push --force-with-lease origin "${{ steps.prep.outputs.branch }}" || true
                  fi
                fi
              fi
            done
          fi
          
          # Verify the push worked
          if [ "${{ steps.prep.outputs.mode }}" = "direct" ]; then
            git fetch origin main
            if git diff --quiet HEAD origin/main; then
              echo "✅ Successfully pushed to main"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Push to main may have failed"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            git fetch origin "${{ steps.prep.outputs.branch }}" 2>/dev/null || true
            if git show-ref --verify --quiet "refs/remotes/origin/${{ steps.prep.outputs.branch }}"; then
              echo "✅ Successfully pushed to branch"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Push to branch may have failed"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Verify files exist remotely
        if: steps.commit.outputs.changed == 'true'
        run: |
          echo "=== Verifying remote branch state ==="
          if [ "${{ steps.prep.outputs.mode }}" != "direct" ]; then
            git fetch origin "${{ steps.prep.outputs.branch }}"
            git checkout "${{ steps.prep.outputs.branch }}"
            echo "Files on remote branch:"
            find ios -name "*.swift" -type f 2>/dev/null | grep -E "(Models|Views|ViewModels)" || echo "No new iOS files found"
          fi

      - name: Open Pull Request (PR mode only)
        if: steps.commit.outputs.changed == 'true' && steps.prep.outputs.mode == 'pr'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Agent: $(cat agent/last_branch_name.txt 2>/dev/null || echo update)"
          body: |
            $(cat agent/last_pr_body.txt 2>/dev/null || echo "Agent update")
            
            ### Generated Files
            $(git diff --name-only HEAD~1 HEAD | grep -E '\.(swift|md)$' | head -10 || echo "No files listed")
          branch: ${{ steps.prep.outputs.branch }}
          base: main
          delete-branch: false

      - name: Final status report
        if: steps.prep.outputs.task != ''
        run: |
          echo "=== Final Status ==="
          echo "Task processed: $(basename ${{ steps.prep.outputs.task }})"
          echo "Mode: ${{ steps.prep.outputs.mode }}"
          echo "Branch: ${{ steps.prep.outputs.branch }}"
          echo "Changes committed: ${{ steps.commit.outputs.changed }}"
          if [ "${{ steps.commit.outputs.changed }}" = "true" ]; then
            echo "✅ Agent successfully generated and committed files"
          else
            echo "❌ Agent ran but no files were committed"
          fi